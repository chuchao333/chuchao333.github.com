<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SICP | Chao's Random Thoughts]]></title>
  <link href="http://chuchao333.github.com/blog/tags/sicp/atom.xml" rel="self"/>
  <link href="http://chuchao333.github.com/"/>
  <updated>2013-06-13T00:38:57+08:00</updated>
  <id>http://chuchao333.github.com/</id>
  <author>
    <name><![CDATA[Chao Chu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP section 1.1]]></title>
    <link href="http://chuchao333.github.com/blog/2013/05/14/sicp-section-1-1/"/>
    <updated>2013-05-14T00:39:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2013/05/14/sicp-section-1-1</id>
    <content type="html"><![CDATA[<p>.. highlights::</p>

<pre><code>Computational processes are abstract beings that inhabit computers. As they
evolve, processes manipulate other abstract things called data. The evolution
of a process is directed by pattern of rules called a program.
</code></pre>

<p>Why use Lisp for the book?</p>

<p>.. highlights::</p>

<pre><code>The most significant unique feature of Lisp is the fact that Lisp descriptions
of processes, called procedures, can themselves be represented and manipulated
as Lisp data. The importance of this is that there are powerful program-design
techniques that rely on the ability to blur the traditional distinction between
"passive" data and "active" processes.
</code></pre>

<p>The three mechanisms of combining simple ideas to form more complex ideas in any
powerful programming languages:</p>

<ol>
  <li>primitive expressions
#. means of combination
#. means of abstraction</li>
</ol>

<p>Substitution model
~~~~~~~~~~~~~~~~~~</p>

<ul>
  <li>
    <p>Applicative order</p>

    <p>Evaluate the operator and operands first and then applies the resulting procedure
to the resulting arguments. “Fully expand and then reduce”</p>
  </li>
  <li>
    <p>Normal order</p>

    <p>Don’t evaluate the operands until their values are needed, instead, substitute
operand expressions for parameters until it obtained an expression involving only
primitive operators, and would then perform the evaluation. “Evaluate the
arguments and then apply”</p>
  </li>
</ul>

<p>Example: Square Roots by Newton’s Method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</p>

<p>.. highlights::</p>

<pre><code>The contrast between function and procedure is a reflection of the general
distinction between describing properties of things and describing how to
do things, or, as it is sometimes refered to, the distinction between
declarative knowledge and imperative knowledge. In mathematics we are
usually concerned with declarative (what is) descriptions, whereas in
computer science we are usually concerned with imperative (how to)
descriptions.
</code></pre>

<p>Exercises
~~~~~~~~~</p>

<p><strong>1.3</strong> Define a procedure that takes three numbers as arguments and return the
sum of squares of the two larger numbers.</p>

<p>.. code-block:: scheme</p>

<pre><code>(define (square x) (* x x))

(define (sum-of-squares a b) (+ (square a) (square b)))

(define (min a b)
  (if (&lt; a b)
     a
     b))

(define (max a b)
  (if (&lt; a b)
     b
     a))

(define (sum-of-squares-of-2-largest a b c)
  (sum-of-squares (max a b) (max c (min a b))))
</code></pre>

<p><strong>1.4</strong> Observe that our model of evaluation allows for combinations whose
operators are compound expressions. Use this observation to describe the
behavior of the following procedure:</p>

<p>.. code-block:: scheme</p>

<pre><code>(define (a-plus-abs-b a b)
  ((if (&gt; b 0) + -) a b))
</code></pre>

<p>if b is greater than 0, the operator that will apply to a and b is +, or else
it will be -, so the a-plus-abs-b will always result in a plus abs of b.</p>

<p><strong>1.5</strong>
Answer: the interpreter that uses applicative order evaluation will hang due
to the infinite recursive call of ‘p’, while an interpreter that uses normal
order evaluation will get 0.</p>

<p><em>Note:</em> <strong>p</strong> is a function, <strong>(p)</strong> is a call to function p.</p>

<p><strong>1.6</strong>
Answer: the interpreter will hang due to the infinite recursive call to
<em>sqrt-iter</em>. Since List uses applicative order evaluation, in the definition
of new-if, the else-clause will always be evaluated no matter the result of
the predicate, thus lead to infinite recursive call to sqrt-iter. That’s why
<strong>if</strong> needs to be a special form, the predicate expression is evaluated first,
and the result determines whether to evaluate the consequent or the alternative
expression.</p>

<p><strong>1.7</strong>
Answer: For small values, the absolute tolerance 0.001 is too large, so the
results become inaccurate. For example, (sqrt 0.001) gives 0.04124542607499115
on my machine. (ubuntu 12.10 x86_64); And for large values, due to the precision
limitation of float-point representation, the guess couldn’t be refined to a
value that can be represented within the tolerance. In such cases, the program
can endlessly alternate between two guesses that are more than 0.001 away from
the true square root.</p>

<p>so, instead of using absolute tolerance, we changed to use the relative
tolerance of two continuous guess values. This can be demonstrated with the
below updated good-enough? procedure:</p>

<p>.. code-block:: scheme</p>

<pre><code>(define (good-enough? guess x)
  (&lt; (abs (- (improve guess x) guess)) 0.001))
</code></pre>

<p><strong>1.8</strong></p>

<p>.. code-block:: scheme</p>

<pre><code>(define (cbrt-iter guess x)
  (if (good-enough? guess x)
    guess
    (cbrt-iter (improve guess x) x)))

(define (improve guess x)
  (/ (+ (/ x (square guess)) (* 2 guess)) 3))

(define (good-enough? guess x)
  (&lt; (abs (- (improve guess x) guess)) 0.001))

(define (square x)
  (* x x))

(define (cbrt x)
  (cbrt-iter 1.0 x))
</code></pre>

<p>The only difference between cbrt and sqrt is the <strong>improve</strong> procedure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera online functional programming course - a retrospective]]></title>
    <link href="http://chuchao333.github.com/blog/2013/01/06/coursera-online-functional-programming-course-review/"/>
    <updated>2013-01-06T15:52:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2013/01/06/coursera-online-functional-programming-course-review</id>
    <content type="html"><![CDATA[<p>Here comes the summary of the Coursera course
<code>Fucntional Programming Principles in Scala &lt;https://class.coursera.org/progfun-2012-001/class/index&gt;</code>_
It’s a little bit late, it has been two months since I finished the course.
This is the first Coursera course I followed from the very beginning to the end
and accomplished all the programming assignments with full scores, which helped
me to get the certificate with distinction.</p>

<p>.. image:: /images/posts/coursera_scala_certificate.jpg</p>

<p>First the excellent parts of the course:</p>

<ul>
  <li>Martin Odersky is a pretty good teacher, and all the lectures are well
designed. I enjoyed watching the lectures a lot and most of which I have
read more than once.</li>
  <li>The programming assignments are well structured, with detailed instructions
and step by step guide. In each of the assignments, the whole task is split
into several steps with approprivate level of abstractions.</li>
  <li>There are also many useful supporting materials like scala style guide, sbt
tutorial, instructions on tools setup for the course, which made it easier
to concentrate on the course content. For me, I don’t have scala develop
environment setup before the course, and by following the tools setup section
in only took me less than half an hour to get everything ready for trying the
example code and the assignments.</li>
</ul>

<p>As for the less-good things, I would say:</p>

<ul>
  <li>Both the lectures and the assignments are quite easy for an experienced
programmers (No functional programming background needed), I was expecting
more challenging stuff.</li>
  <li>There are no official solutions distributed. (The course will be offered
again some time later) However, I still think for those students who passed
the course should be qualified to get the solutions so that they can compare
those with their own to see where they can still improve.</li>
  <li>It’s a pity that this is only the first half of an advanced undergraduate
course that Martin taught on campus. I am interested in the other half.</li>
</ul>

<p>After taking this cousre, I got a deeper understanding of the functional
programming basics and it made me feel more comfortable while picking up
SICP again (after 3 years). Now, I am convinced that I am able to go through
SICP and finish most of the exercises. Also, I had a firmer grasp of Scala
even though I didn’t write more than 100 lines of Scala before; I understand
more about the scala syntax, idioms and even the motivations behind some of the
language structures. E.g., call by name/value, lazy evaluation, currying,
pattern matching and so on. I will publish my detailed notes on the lectures
and assignments to this blog later.</p>

<p>To conclude, I really enjoyed taking the course and many thanks to Martin
, the TAs, and also the coursera staff for offering such a wonderful course.</p>
]]></content>
  </entry>
  
</feed>
