<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chao's Random Thoughts]]></title>
  <link href="http://chuchao333.github.com/atom.xml" rel="self"/>
  <link href="http://chuchao333.github.com/"/>
  <updated>2013-05-14T01:03:59+08:00</updated>
  <id>http://chuchao333.github.com/</id>
  <author>
    <name><![CDATA[Chao Chu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SICP section 1.1]]></title>
    <link href="http://chuchao333.github.com/blog/2013/05/14/sicp-section-1-1/"/>
    <updated>2013-05-14T00:39:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2013/05/14/sicp-section-1-1</id>
    <content type="html"><![CDATA[<blockquote class="highlights">
Computational processes are abstract beings that inhabit computers. As they
evolve, processes manipulate other abstract things called data. The evolution
of a process is directed by pattern of rules called a program.</blockquote>
<p>Why use Lisp for the book?</p>
<blockquote class="highlights">
The most significant unique feature of Lisp is the fact that Lisp descriptions
of processes, called procedures, can themselves be represented and manipulated
as Lisp data. The importance of this is that there are powerful program-design
techniques that rely on the ability to blur the traditional distinction between
&quot;passive&quot; data and &quot;active&quot; processes.</blockquote>
<p>The three mechanisms of combining simple ideas to form more complex ideas in any
powerful programming languages:</p>
<ol class="arabic simple">
<li>primitive expressions</li>
<li>means of combination</li>
<li>means of abstraction</li>
</ol>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coursera online functional programming course - a retrospective]]></title>
    <link href="http://chuchao333.github.com/blog/2013/01/06/coursera-online-functional-programming-course-review/"/>
    <updated>2013-01-06T15:52:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2013/01/06/coursera-online-functional-programming-course-review</id>
    <content type="html"><![CDATA[<p>Here comes the summary of the Coursera course
<a class="reference external" href="https://class.coursera.org/progfun-2012-001/class/index">Fucntional Programming Principles in Scala</a>
It&#8217;s a little bit late, it has been two months since I finished the course.
This is the first Coursera course I followed from the very beginning to the end
and accomplished all the programming assignments with full scores, which helped
me to get the certificate with distinction.</p>
<img alt="/images/posts/coursera_scala_certificate.jpg" src="http://chuchao333.github.com/images/posts/coursera_scala_certificate.jpg" />
<p>First the excellent parts of the course:</p>
<ul class="simple">
<li>Martin Odersky is a pretty good teacher, and all the lectures are well
designed. I enjoyed watching the lectures a lot and most of which I have
read more than once.</li>
<li>The programming assignments are well structured, with detailed instructions
and step by step guide. In each of the assignments, the whole task is split
into several steps with approprivate level of abstractions.</li>
<li>There are also many useful supporting materials like scala style guide, sbt
tutorial, instructions on tools setup for the course, which made it easier
to concentrate on the course content. For me, I don&#8217;t have scala develop
environment setup before the course, and by following the tools setup section
in only took me less than half an hour to get everything ready for trying the
example code and the assignments.</li>
</ul>
<p>As for the less-good things, I would say:</p>
<ul class="simple">
<li>Both the lectures and the assignments are quite easy for an experienced
programmers (No functional programming background needed), I was expecting
more challenging stuff.</li>
<li>There are no official solutions distributed. (The course will be offered
again some time later) However, I still think for those students who passed
the course should be qualified to get the solutions so that they can compare
those with their own to see where they can still improve.</li>
<li>It&#8217;s a pity that this is only the first half of an advanced undergraduate
course that Martin taught on campus. I am interested in the other half.</li>
</ul>
<p>After taking this cousre, I got a deeper understanding of the functional
programming basics and it made me feel more comfortable while picking up
SICP again (after 3 years). Now, I am convinced that I am able to go through
SICP and finish most of the exercises. Also, I had a firmer grasp of Scala
even though I didn&#8217;t write more than 100 lines of Scala before; I understand
more about the scala syntax, idioms and even the motivations behind some of the
language structures. E.g., call by name/value, lazy evaluation, currying,
pattern matching and so on. I will publish my detailed notes on the lectures
and assignments to this blog later.</p>
<p>To conclude, I really enjoyed taking the course and many thanks to Martin
, the TAs, and also the coursera staff for offering such a wonderful course.</p>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python abc]]></title>
    <link href="http://chuchao333.github.com/blog/2012/08/21/python-abc/"/>
    <updated>2012-08-21T21:06:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/08/21/python-abc</id>
    <content type="html"><![CDATA[<div class="section" id="introduction">
<h2>Introduction</h2>
<p>This module provides the infrastructure for defining
<a class="reference external" href="http://docs.python.org/glossary.html#term-abstract-base-class">abstract base classes</a>
(ABCs) in Python. The ABCs define a minimal set of methods that establish the
characteristic behavior of the type. For more details about this, see
<a class="reference external" href="http://www.python.org/dev/peps/pep-3119/">PEP 3119</a>.</p>
</div>
<div class="section" id="highlights">
<h2>Highlights</h2>
<p>The module provides a <a class="reference external" href="http://docs.python.org/glossary.html#term-metaclass">metaclass</a>
used to create ABCs. An ABC can be subclassed directly. The class also has a &#8216;register&#8217;
method to register unrelated concrete classes (including built-in classes) and unrelated
ABCs as &#8216;virtual subclasses&#8217;</p>
<p>Also there are two decorators <em>abstractmethod</em> and <em>abstractproperty</em>, which will set
the function object&#8217;s attribute &#8216;__isabstractmethod__&#8217; to True. Only when all of the
abstract methods and abstract properties are overriden, can a class that has a metaclass
derived from ABCMeta be instantiated.</p>
</div>
<div class="section" id="code-comments">
<h2>Code comments</h2>
<div class="section" id="abcmeta-new">
<h3>ABCMeta.__new__</h3>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">mcls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">namespace</span><span class="p">):</span>
</span><span class="line">    <span class="n">cls</span> <span class="o">=</span> <span class="nb">super</span><span class="p">(</span><span class="n">ABCMeta</span><span class="p">,</span> <span class="n">mcls</span><span class="p">)</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">mcls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">bases</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
</span><span class="line">    <span class="c"># Compute set of abstract method names</span>
</span><span class="line">    <span class="n">abstracts</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">name</span>
</span><span class="line">                 <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">namespace</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>
</span><span class="line">                 <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&quot;__isabstractmethod__&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
</span><span class="line">    <span class="k">for</span> <span class="n">base</span> <span class="ow">in</span> <span class="n">bases</span><span class="p">:</span>
</span><span class="line">        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="s">&quot;__abstractmethods__&quot;</span><span class="p">,</span> <span class="nb">set</span><span class="p">()):</span>
</span><span class="line">            <span class="n">value</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="s">&quot;__isabstractmethod__&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span>
</span><span class="line">                <span class="n">abstracts</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">__abstractmethods__</span> <span class="o">=</span> <span class="nb">frozenset</span><span class="p">(</span><span class="n">abstracts</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="c"># chaoc: caches are the typical usages of weak references</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Set up inheritance registry</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">_abc_registry</span> <span class="o">=</span> <span class="n">WeakSet</span><span class="p">()</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">_abc_cache</span> <span class="o">=</span> <span class="n">WeakSet</span><span class="p">()</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">_abc_negative_cache</span> <span class="o">=</span> <span class="n">WeakSet</span><span class="p">()</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">_abc_negative_cache_version</span> <span class="o">=</span> <span class="n">ABCMeta</span><span class="o">.</span><span class="n">_abc_invalidation_counter</span>
</span><span class="line">    <span class="k">return</span> <span class="n">cls</span>
</span></code></pre></td></tr></table></div></figure><ul class="simple">
<li>It first creates a &#8216;type&#8217; object cls. (super(ABCMeta, mcls) is &#8216;type&#8217;)</li>
<li>Iterate through all the attributes (including all the attributes inherited
from all the bases), if any of them have &#8216;__isabstractmethod__&#8217; set to true,
add it to cls&#8217;s __abstractmethods__.</li>
<li>Initialize the attributes &#8216;_abc_registry&#8217;, &#8216;_abc_cache&#8217;, &#8216;_abc_negative_cache&#8217;
and &#8216;_abc_negative_cache_version&#8217;, which are used to speed up the check in
__instancecheck__ and __subclasscheck__.</li>
</ul>
</div>
<div class="section" id="abcmeta-register-cls-subclass">
<h3>ABCMeta.register(cls, subclass)</h3>
<p>See the added comments in line</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">subclass</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Register a virtual subclass of an ABC.&quot;&quot;&quot;</span>
</span><span class="line">    <span class="c"># chaoc: sanity check to make sure that subclass is class type</span>
</span><span class="line">    <span class="c"># either a type object (for new style classes) or the type is</span>
</span><span class="line">    <span class="c"># the same as ClassType(for old style classes)</span>
</span><span class="line">    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">subclass</span><span class="p">,</span> <span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="n">types</span><span class="o">.</span><span class="n">ClassType</span><span class="p">)):</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s">&quot;Can only register classes&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">subclass</span><span class="p">,</span> <span class="n">cls</span><span class="p">):</span>
</span><span class="line">        <span class="k">return</span>  <span class="c"># Already a subclass</span>
</span><span class="line">    <span class="c"># Subtle: test for cycles *after* testing for &quot;already a subclass&quot;;</span>
</span><span class="line">    <span class="c"># this means we allow X.register(X) and interpret it as a no-op.</span>
</span><span class="line">    <span class="k">if</span> <span class="nb">issubclass</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">subclass</span><span class="p">):</span>
</span><span class="line">        <span class="c"># This would create a cycle, which is bad for the algorithm below</span>
</span><span class="line">        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&quot;Refusing to create an inheritance cycle&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">cls</span><span class="o">.</span><span class="n">_abc_registry</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
</span><span class="line">    <span class="n">ABCMeta</span><span class="o">.</span><span class="n">_abc_invalidation_counter</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c"># Invalidate negative cache</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="abcmeta-instancecheck">
<h3>ABCMeta.__instancecheck__</h3>
<p>See the added comments in line</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">__instancecheck__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">instance</span><span class="p">):</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Override for isinstance(instance, cls).&quot;&quot;&quot;</span>
</span><span class="line">    <span class="c"># Inline the cache checking when it&#39;s simple.</span>
</span><span class="line">    <span class="n">subclass</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">instance</span><span class="p">,</span> <span class="s">&#39;__class__&#39;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
</span><span class="line">    <span class="k">if</span> <span class="n">subclass</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">subclass</span> <span class="ow">in</span> <span class="n">cls</span><span class="o">.</span><span class="n">_abc_cache</span><span class="p">:</span>
</span><span class="line">        <span class="k">return</span> <span class="bp">True</span>
</span><span class="line">    <span class="n">subtype</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">instance</span><span class="p">)</span>
</span><span class="line">    <span class="c"># Old-style instances</span>
</span><span class="line">    <span class="k">if</span> <span class="n">subtype</span> <span class="ow">is</span> <span class="n">_InstanceType</span><span class="p">:</span>
</span><span class="line">        <span class="n">subtype</span> <span class="o">=</span> <span class="n">subclass</span>
</span><span class="line">    <span class="c"># chaoc: subtype will also be subclass for old style classes</span>
</span><span class="line">    <span class="c"># as assigned in the above step</span>
</span><span class="line">    <span class="k">if</span> <span class="n">subtype</span> <span class="ow">is</span> <span class="n">subclass</span> <span class="ow">or</span> <span class="n">subclass</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="c"># chaoc: check if the negative cache is safe to use or not</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">_abc_negative_cache_version</span> <span class="o">==</span>
</span><span class="line">            <span class="n">ABCMeta</span><span class="o">.</span><span class="n">_abc_invalidation_counter</span> <span class="ow">and</span>
</span><span class="line">            <span class="n">subtype</span> <span class="ow">in</span> <span class="n">cls</span><span class="o">.</span><span class="n">_abc_negative_cache</span><span class="p">):</span>
</span><span class="line">            <span class="k">return</span> <span class="bp">False</span>
</span><span class="line">        <span class="c"># Fall back to the subclass check.</span>
</span><span class="line">        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="n">__subclasscheck__</span><span class="p">(</span><span class="n">subtype</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="p">(</span><span class="n">cls</span><span class="o">.</span><span class="n">__subclasscheck__</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span> <span class="ow">or</span>
</span><span class="line">            <span class="n">cls</span><span class="o">.</span><span class="n">__subclasscheck__</span><span class="p">(</span><span class="n">subtype</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="abcmeta-subclasscheck">
<h3>ABCMeta.__subclasscheck__</h3>
<p>The code and comment in this function is very clear and straightforward.</p>
<p>Just make sure the different cases needed to check:</p>
<ol class="arabic simple">
<li>check the subclass hook</li>
<li>check if it&#8217;s a direct subclass through __mro__</li>
<li>check if it&#8217;s a subclass of a registered class (issubclass is called to do
recursive check)</li>
<li>check if it&#8217;s a subclass of a subclass (issubclass is called to do recursive
check)</li>
</ol>
<p>In this post, we only talk about the defitions of ABCMeta. We will see the
typical usages in the <strong>collections</strong> module.</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python bisect]]></title>
    <link href="http://chuchao333.github.com/blog/2012/08/19/python-bisect/"/>
    <updated>2012-08-19T20:01:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/08/19/python-bisect</id>
    <content type="html"><![CDATA[<div class="section" id="introduction">
<h2>Introduction</h2>
<p>This module provides support for maintaining a list in sorted order without
having to sort the list after each insertion. It uses a basic bisection
algorithm similar with the classic binary search.</p>
</div>
<div class="section" id="review-of-binary-search">
<h2>Review of binary search</h2>
<p>According to <a class="reference external" href="http://www.amazon.com/Programming-Pearls-2nd-Edition-Bentley/dp/0201657880/ref=sr_1_1?ie=UTF8&amp;qid=1345379618&amp;sr=8-1&amp;keywords=programming+pearls">&#8216;Programming Pearls&#8217;</a>
by Jon Bentley, It&#8217;s very hard to write a correct binary search(Unbelievable, Uh?).
Below is the note from the book:</p>
<blockquote class="highlights">
I&#8217;ve assigned [binary search] in courses at Bell Labs and IBM.
Professional programmers had a couple of hours to convert [its] description
into a program in the language of their choice; a high-level pseudocode
was fine. At the end of the speci?ed time, almost all the programmers
reported that they had correct code for the task. We would then take thirty
minutes to examine their code, which the programmers did with test cases.
In several classes and with over a hundred programmers, the results varied
little: ninety percent of the programmers found bugs in their programs (and
I wasn&#8217;t always convinced of the correctness of the code in which no bugs were
found). I was amazed: given ample time, only about ten percent of professional
programmers were able to get this small program right. But they aren&#8217;t the only
ones to ?nd this task difficult: in the history in Section 6.2.1 of his
&#8216;Sorting and Searching&#8217;, Knuth points out that while the first binary search
was published in 1946, the first published binary search without bugs did not
appear until 1962.</blockquote>
<p>Understanding how to use loop invariants in composing a program is very important,
so let&#8217;s first implement a binary search and prove the correctness utilizing this.
Here we use a simplified specification compared to the bsearch function in the C
standard library.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="cpp"><span class="line"><span class="kt">int</span> <span class="n">binsearch</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span><span class="o">*</span> <span class="n">A</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
</span><span class="line"><span class="c1">// @require 0 &lt;= n &amp;&amp; n &lt;= length(A)</span>
</span><span class="line"><span class="c1">// @require is_sorted(A, n)</span>
</span><span class="line"><span class="cm">/* @ensures (-1 == result &amp;&amp; !is_in(x, A, n))</span>
</span><span class="line"><span class="cm">            || ((0 &lt;= result &amp;&amp; result &lt; n) &amp;&amp; A[result] == x)</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">lower</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">higher</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">mid</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="p">(</span><span class="n">lower</span> <span class="o">&lt;</span> <span class="n">higher</span><span class="p">)</span>
</span><span class="line">    <span class="c1">// @loop_invariant 0 &lt;= lower &amp;&amp; lower &lt;= higher &amp;&amp; higher &lt;= n</span>
</span><span class="line">    <span class="c1">// @loop_invariant (lower == 0 || A[lower - 1] &lt; x)</span>
</span><span class="line">    <span class="c1">// @loop_invariant (higher == n || A[higher] &gt; x)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="n">mid</span> <span class="o">=</span> <span class="n">lower</span> <span class="o">+</span> <span class="p">(</span><span class="n">higher</span> <span class="o">-</span> <span class="n">lower</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span><span class="line">        <span class="c1">// @assert lower &lt;= mid &amp;&amp; mid &lt; higher</span>
</span><span class="line">        <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">x</span><span class="p">)</span>
</span><span class="line">            <span class="n">lower</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="k">else</span>
</span><span class="line">            <span class="n">higher</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure><p>It&#8217;s easy to prove that the loop invariants are strong enough to imple the
postcodition of the function(&#64;ensures). Does this function terminate? In the
loop body, we have lower &lt; higher, so lower &lt;= mid &amp;&amp; mid &lt; higher, then the
intervals from <em>lower</em> to <em>mid</em> and from <em>(mid+1)</em> to <em>higher</em> are strictly
smaller than the original interval (lower, higher), unless we find the element,
the difference between higher and lower will eventually become 0 and we will
exit the loop.</p>
<p><strong>The bisect() functions provided in this module are useful for finding the
insertion points but can be tricky or awkward to use for common searching
tasks.</strong></p>
</div>
<div class="section" id="code-comments">
<h2>Code comments</h2>
<p>The above binsearch function will return the first of the elements that equals
to the target if there are more than one. Sometimes it&#8217;s required to find the
left most one or the right most one. We can achieve this by using the bisect()
functions. Let&#8217;s examine the pre and post conditions, and also loop invariants.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">bisect_right</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">lo</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">hi</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">
</span><span class="line">    <span class="c"># Let l be the original lo passed in, and h be hi. In order to differentiate.</span>
</span><span class="line">
</span><span class="line">    <span class="c"># @requires 0 &lt;= l &amp;&amp; l &lt; h &amp;&amp; h &lt;= len(a)</span>
</span><span class="line">    <span class="c"># @requires is_sorted(a[l:h])</span>
</span><span class="line">    <span class="c"># @ensures all e in a[l:result] have e &lt;= x, and all e in a[result:h] have e &gt; x</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span> <span class="n">lo</span> <span class="o">&lt;</span> <span class="n">hi</span><span class="p">:</span>
</span><span class="line">        <span class="c"># @loop_invariant l &lt;= lo &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= h</span>
</span><span class="line">        <span class="c"># @loop_invariant lo == l || a[lo - 1] &lt;= x</span>
</span><span class="line">        <span class="c"># @loop_invariant hi == h || a[hi] &gt; x</span>
</span><span class="line">        <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">lo</span> <span class="o">+</span> <span class="n">hi</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
</span><span class="line">        <span class="c"># @assert lower &lt;= mid &amp;&amp; mid &lt; higher</span>
</span><span class="line">        <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">[</span><span class="n">mid</span><span class="p">]:</span>
</span><span class="line">            <span class="n">hi</span> <span class="o">=</span> <span class="n">mid</span>
</span><span class="line">        <span class="k">else</span><span class="p">:</span>
</span><span class="line">            <span class="n">lo</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class="line">    <span class="k">return</span> <span class="n">lo</span>
</span></code></pre></td></tr></table></div></figure><p>After exiting the loop, we have lo == hi. Now we have to distinguish some cases:</p>
<ul class="simple">
<li>If lo == l, from the third conjunct, we know that a[hi] &gt; x, and since lo == hi,
we have a[lo] &gt; x. In this case, all e in a[l:h] &gt; x</li>
<li>If hi == h, from the second conjunct, we know that a[lo - 1] &lt; x, in this case,
all e in a[l:h] &lt;= x</li>
<li>if lo != l and hi != h, from the second and third conjuncts, we know that
a[lo - 1] &lt;= x, a[hi] &gt; x. The post condition still holds.</li>
</ul>
<p>We can do the same analysis on the function bisect_left().</p>
<p>Note: In the pre condition I explicitly written down that lo &lt; hi is required, the
code will directly return lo when hi is less than or equal to lo, but that&#8217;s simply
meaningless, if this is the case, the sorted order of &#8216;a&#8217; after we insert element
before the index returned by the function.</p>
<div class="section" id="about-the-function-prototype">
<h3>About the function prototype</h3>
<p>In the doc of the module, it&#8217;s <strong>bisect.bisect_right(a, x, lo=0, hi=len(a))</strong>
while in the source code, it&#8217;s <strong>def bisect_left(a, x, lo=0, hi=None)</strong></p>
<p><strong>bisect.bisect_right(a, x, lo=0, hi=len(a))</strong> is not valid python code, you will
get error like this: <strong>NameError: name &#8216;a&#8217; is not defined.</strong> This is because default
values are computed and bound at the function definition time rather than when you
call the function. This means that you can&#8217;t have a default which is dependent on
something that is not known until the function is called.</p>
</div>
</div>
<div class="section" id="pythonic-stuff">
<h2>Pythonic stuff</h2>
<div class="section" id="override-function-definitions-in-python">
<h3>Override function definitions in Python</h3>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Overwrite above definitions with a fast C implementation</span>
</span><span class="line"><span class="k">try</span><span class="p">:</span>
</span><span class="line">    <span class="kn">from</span> <span class="nn">_bisect</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class="line"><span class="k">except</span> <span class="ne">ImportError</span><span class="p">:</span>
</span><span class="line">    <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="gotcha-mutable-default-arguments">
<h3>Gotcha &#8211; Mutable default arguments</h3>
<p>See <a class="reference external" href="http://stackoverflow.com/questions/1132941/least-astonishment-in-python-the-mutable-default-argument">here</a>
for more details.</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Support LaTex in Octopress]]></title>
    <link href="http://chuchao333.github.com/blog/2012/08/18/supporting-latex-in-octopress/"/>
    <updated>2012-08-18T00:57:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/08/18/supporting-latex-in-octopress</id>
    <content type="html"><![CDATA[<p>It took me some time to finally get latex math formulas working in Octopress.
If you googled ‘Octopress latex’, you can get quite a few online resources about
how to support latex in octopress, with various levels of complexity. In this
post, I will write down how I achieve this.</p>

<h2 id="the-initial-attempt">The initial attempt</h2>
<p>As I installed the <a href="https://github.com/xdissent/jekyll-rst">jekyll-rst</a> plugin
to use rst to write my posts, I thought it should be easy to write latex math
because docutils has native support for it since version 0.8 (A :math: role and
also a .. math: directive introduced for that). However, after I tried to use
these in a octopress post, I found that the post will be rendered to empty. For
example, if I insert the following rst code into my post, the whole post becomes
empty; but after removing this line, everything is fine.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">The area of a circle is :math:`A_\text{c} = (\pi/4) d^2`.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I also verified that the exact same code can be successfully converted to valid
html using the ‘rst2html.py’ script on my system, so I guess maybe something is
wrong in ‘RbST’. I found that in RbST, it has its own copies of rst2html and
rst2latex tools under ** /gems/RbST-0.1.3/lib/rst2parts **,</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="console"><span class="line"><span class="gp">chuchao@chuchao:~/.rvm/gems/ruby-1.9.2-p320/gems/RbST-0.1.3/lib/rst2parts$</span> ls
</span><span class="line"><span class="go">__init__.py  rst2html.py  rst2latex.py  transform.py  transform.pyc</span>
</span><span class="line"><span class="gp">chuchao@chuchao:~/.rvm/gems/ruby-1.9.2-p320/gems/RbST-0.1.3/lib/rst2parts$</span> ls ..
</span><span class="line"><span class="go">rbst.rb  rst2parts</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>which will be used in rbst.rb. I have even tried to change rbst.rb to use the
rst2html.py installed on my system, but this also didn’t get any luck.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">class</span> <span class="nc">RbST</span>
</span><span class="line">
</span><span class="line">  <span class="vc">@@executable_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">),</span> <span class="s2">&quot;rst2parts&quot;</span><span class="p">))</span>
</span><span class="line">  <span class="vc">@@executables</span> <span class="o">=</span> <span class="p">{</span>
</span><span class="line">    <span class="c1"># :html  =&gt; File.join(@@executable_path, &quot;rst2html.py&quot;),</span>
</span><span class="line">    <span class="ss">:html</span>  <span class="o">=&gt;</span> <span class="s2">&quot;/usr/local/bin/rst2html.py&quot;</span><span class="p">,</span>
</span><span class="line">    <span class="ss">:latex</span> <span class="o">=&gt;</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="vc">@@executable_path</span><span class="p">,</span> <span class="s2">&quot;rst2latex.py&quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line"><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Finally, I gave up on this and opened an
<a href="https://github.com/xdissent/jekyll-rst/issues/6">issue</a> on this for the jekyll-rst
plugin. Hope the author can fix this.</p>

<h2 id="switch-back-to-markdown-and-using-kramdown">Switch back to markdown and using kramdown</h2>
<p>After a google search about this issue, seems that the simplest solution is to use
kramdown, which has built-in support for latex.</p>

<p>First, install kramdown:
<code>gem install karmdown</code></p>

<p>Then, add mathjax configs into &lt;head&gt;&lt;/head&gt; tag, in octopress, just add the
below code into <code>/source/_includes/custom/head.html</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="c">&lt;!-- mathjax config similar to math.stackexchange --&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">    <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">inlineMath</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="s1">&#39;$&#39;</span><span class="p">,</span><span class="s1">&#39;$&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s2">&quot;\\(&quot;</span><span class="p">,</span><span class="s2">&quot;\\)&quot;</span><span class="p">]</span> <span class="p">],</span>
</span><span class="line">      <span class="nx">processEscapes</span><span class="o">:</span> <span class="kc">true</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Config</span><span class="p">({</span>
</span><span class="line">      <span class="nx">tex2jax</span><span class="o">:</span> <span class="p">{</span>
</span><span class="line">        <span class="nx">skipTags</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;noscript&#39;</span><span class="p">,</span> <span class="s1">&#39;style&#39;</span><span class="p">,</span> <span class="s1">&#39;textarea&#39;</span><span class="p">,</span> <span class="s1">&#39;pre&#39;</span><span class="p">,</span> <span class="s1">&#39;code&#39;</span><span class="p">]</span>
</span><span class="line">      <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-mathjax-config&quot;</span><span class="nt">&gt;</span>
</span><span class="line">    <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">Queue</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class="line">        <span class="kd">var</span> <span class="nx">all</span> <span class="o">=</span> <span class="nx">MathJax</span><span class="p">.</span><span class="nx">Hub</span><span class="p">.</span><span class="nx">getAllJax</span><span class="p">(),</span> <span class="nx">i</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">all</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="nx">all</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">SourceElement</span><span class="p">().</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; has-jax&#39;</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">});</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span><span class="line">
</span><span class="line"><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span>
</span><span class="line">   <span class="na">src=</span><span class="s">&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;</span><span class="nt">&gt;</span>
</span><span class="line"><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>See <a href="http://kramdown.rubyforge.org/syntax.html#math-blocks">here</a> for more details.
After this, we are ready to test latex math in our post. For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="latex"><span class="line"><span class="sb">$$</span><span class="nb"></span>
</span><span class="line"><span class="nv">\begin</span><span class="nb">{align</span><span class="o">*</span><span class="nb">}</span>
</span><span class="line"><span class="nb">  &amp; </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">x,y</span><span class="o">)</span><span class="nb"> </span><span class="o">=</span><span class="nb"> </span><span class="nv">\phi</span><span class="nb"> </span><span class="nv">\left</span><span class="o">(</span><span class="nv">\sum</span><span class="nb">_{i</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n x_ie_i, </span><span class="nv">\sum</span><span class="nb">_{j</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n y_je_j </span><span class="nv">\right</span><span class="o">)</span><span class="nb"></span>
</span><span class="line"><span class="nb">  </span><span class="o">=</span><span class="nb"> </span><span class="nv">\sum</span><span class="nb">_{i</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n </span><span class="nv">\sum</span><span class="nb">_{j</span><span class="o">=</span><span class="m">1</span><span class="nb">}^n x_i y_j </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">e_i, e_j</span><span class="o">)</span><span class="nb"> </span><span class="o">=</span><span class="nb"> </span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nb">  &amp; </span><span class="o">(</span><span class="nb">x_</span><span class="m">1</span><span class="nb">, </span><span class="nv">\ldots</span><span class="nb">, x_n</span><span class="o">)</span><span class="nb"> </span><span class="nv">\left</span><span class="o">(</span><span class="nb"> </span><span class="nv">\begin</span><span class="nb">{array}{ccc}</span>
</span><span class="line"><span class="nb">      </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">e_</span><span class="m">1</span><span class="nb">, e_</span><span class="m">1</span><span class="o">)</span><span class="nb"> &amp; </span><span class="nv">\cdots</span><span class="nb"> &amp; </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">e_</span><span class="m">1</span><span class="nb">, e_n</span><span class="o">)</span><span class="nb"> </span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nb">      </span><span class="nv">\vdots</span><span class="nb"> &amp; </span><span class="nv">\ddots</span><span class="nb"> &amp; </span><span class="nv">\vdots</span><span class="nb"> </span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nb">      </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">e_n, e_</span><span class="m">1</span><span class="o">)</span><span class="nb"> &amp; </span><span class="nv">\cdots</span><span class="nb"> &amp; </span><span class="nv">\phi</span><span class="o">(</span><span class="nb">e_n, e_n</span><span class="o">)</span><span class="nb"></span>
</span><span class="line"><span class="nb">    </span><span class="nv">\end</span><span class="nb">{array} </span><span class="nv">\right</span><span class="o">)</span><span class="nb"></span>
</span><span class="line"><span class="nb">  </span><span class="nv">\left</span><span class="o">(</span><span class="nb"> </span><span class="nv">\begin</span><span class="nb">{array}{c}</span>
</span><span class="line"><span class="nb">      y_</span><span class="m">1</span><span class="nb"> </span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nb">      </span><span class="nv">\vdots</span><span class="nb"> </span><span class="nv">\\</span><span class="nb"></span>
</span><span class="line"><span class="nb">      y_n</span>
</span><span class="line"><span class="nb">    </span><span class="nv">\end</span><span class="nb">{array} </span><span class="nv">\right</span><span class="o">)</span><span class="nb"></span>
</span><span class="line"><span class="nv">\end</span><span class="nb">{align</span><span class="o">*</span><span class="nb">}</span>
</span><span class="line"><span class="s">$$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>will render as</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<p>And for inline latex code, just use <code>$\exp(-\frac{x^2}{2})$</code>, which will give
$\exp(-\frac{x^2}{2})$.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python heapq]]></title>
    <link href="http://chuchao333.github.com/blog/2012/08/14/python-heapq/"/>
    <updated>2012-08-14T22:26:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/08/14/python-heapq</id>
    <content type="html"><![CDATA[<div class="section" id="introduction">
<h2>Introduction</h2>
<p>The module provides an implementation of heap queue algorithm, also known as
priority queue algorithm.</p>
</div>
<div class="section" id="highlights">
<h2>Highlights</h2>
<ul class="simple">
<li>Zero-based indexing is used, so the children&#8217;s index of node with index k
are (2*k + 1) and (2*k + 2) respectively.</li>
<li>Internally a &#8216;min heap&#8217; is maintained rather than &#8216;max heap&#8217;, which is more
generally used in algorithm textbooks.</li>
<li>Three general functions based on heaps are also provided:</li>
</ul>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="c"># Merge multiple sorted inputs into a single sorted output</span>
</span><span class="line"><span class="c"># (for example, merge timestamped entries from multiple log files)</span>
</span><span class="line"><span class="n">heapq</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="o">*</span><span class="n">iterables</span><span class="p">)</span>
</span><span class="line">
</span><span class="line"><span class="c"># The following two functions are effectively like</span>
</span><span class="line"><span class="c"># sorted(iterable, key=key, reverse=True)[:n] and</span>
</span><span class="line"><span class="c"># sorted(iterable, key=key)[:n],</span>
</span><span class="line"><span class="c"># but they perform best with smaller values of n</span>
</span><span class="line"><span class="n">heapq</span><span class="o">.</span><span class="n">nlargest</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">iterable</span><span class="p">[,</span> <span class="n">key</span><span class="p">])</span>
</span><span class="line"><span class="n">heapq</span><span class="o">.</span><span class="n">nsmallest</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">iterable</span><span class="p">[,</span> <span class="n">key</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure></div>
<div class="section" id="pythonic-stuff">
<h2>Pythonic stuff</h2>
<div class="section" id="rich-comparison-methods">
<h3>Rich comparison methods</h3>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">cmp_lt</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class="line">    <span class="c"># use __lt__ if available; otherwise, try __le__</span>
</span><span class="line">    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="s">&#39;__lt__&#39;</span><span class="p">)</span> <span class="k">else</span> <span class="p">(</span><span class="ow">not</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure><p>In python, there are 6 so called &quot;Rich Comparison&quot; methods, x &lt; y calls
x.__lt__(y) and others are similar (__le__ and &lt;=; __gt__ and &gt;=; __eq__ and ==;
__ne__ and &lt;&gt;). Arguments to rich comparison  methods are never coerced. see
<a class="reference external" href="http://docs.python.org/glossary.html#term-coercion">coercion</a></p>
</div>
</div>
<div class="section" id="code-comments">
<h2>Code comments</h2>
<div class="section" id="why-heapify-x-is-o-n">
<h3>Why heapify(x) is O(n)?</h3>
<p>This is not obvious at first by seeing the code, given that there is a &#8216;while&#8217;
loop in _siftup and also a while loop in _siftdown(called in _siftup). Let&#8217;s
look into it further:</p>
<ol class="arabic simple">
<li>in the while loop of _siftup, it takes O(L) time for nodes that L levels
above leaves.</li>
<li>and in the while loop of _siftdown called in _siftup, it takes at most L
steps, so _siftdown is O(L).</li>
<li>since we have n/4 nodes in level 1, n/8 nodes in level 2, and finally one
root node, which is lg(n) levels above leaf, so the total amount in the while
loop of heapify is:</li>
</ol>
<div class="line-block">
<div class="line"><strong>n/4 * c + n/8 * c + n/16 * 3c + &#8230; + 1 * lg(n) * c</strong>, and let n/4 = 2^k,
after simplification, we get:</div>
<div class="line"><strong>c * 2^k(1/2^0 + 2/2^1 + 3/2^2 + &#8230; + (k+1)/2^k)</strong>, as the limit of
<strong>(k+1)/2^k</strong> is 0 when k is infinite, so the term in the brackets bound to
a constant, from this we can conclude that heapify is O(2^k), which is O(n).</div>
<div class="line"><br /></div>
</div>
</div>
<div class="section" id="why-it-continues-to-find-the-smaller-child-until-a-leaf-is-hit-in-siftup">
<h3>Why it continues to find the smaller child until a leaf is hit in _siftup?</h3>
<p>As explained in the comment by the module author, this is a ad hoc to reduce
the comparisons on the following operations on the heap.</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction on reading source of python standard libraries series]]></title>
    <link href="http://chuchao333.github.com/blog/2012/08/14/intro-on-reading-source-of-python-standard-libraries/"/>
    <updated>2012-08-14T21:11:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/08/14/intro-on-reading-source-of-python-standard-libraries</id>
    <content type="html"><![CDATA[<p>I am going to start the series of posts on reading the source of python standard
modules. I will go with the pure python modules first, and maybe later I can
continue with C implementations of the modules. Let&#8217;s see how far I could go.</p>
<div class="section" id="what-will-be-included">
<h2>What will be included</h2>
<ul class="simple">
<li>A brief introduction of the module. (It should be very short, people can go to
the standard library doc for more information.)</li>
<li>Special highlights about the important APIs, implementation details.</li>
<li>Python features/idioms/tricks/gotchas that worth the whistle, especially those
I was not familiar with</li>
<li>Detail explanations about the tricky part of the code if any</li>
</ul>
</div>
<div class="section" id="what-will-not-be-included">
<h2>What will not be included</h2>
<ul class="simple">
<li>The example usage of the various APIs, for this kind of stuff,
<a class="reference external" href="http://www.doughellmann.com/PyMOTW/">Python module of the week</a> is a better
place to go</li>
</ul>
<p>Also, alone the way, I may start another series on some specific &#8216;advanced topics&#8217;
in python, like <strong>descriptor</strong>, <strong>decorator</strong>, <strong>method resolution order(mro)</strong>
and so on. Mainly about why they are introduced into python, how they are used and
the typical use cases. This is inspired by the blogs about
<a class="reference external" href="http://python-history.blogspot.com/">python history</a></p>
<p>This post will also be used to track my progress.</p>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress and Github]]></title>
    <link href="http://chuchao333.github.com/blog/2012/07/25/octopress-and-github/"/>
    <updated>2012-07-25T23:21:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/07/25/octopress-and-github</id>
    <content type="html"><![CDATA[<p>This post documents how I set up this blog and the problems encounted. Octopress
is quite popular recently and you can just find a huge number of bloggers who
have written about how to set this up online. My main references are
<a class="reference external" href="http://www.gerardcondon.com/blog/2012/03/04/setting-up-octopress-and-github/">Setting up a blog on Octopress and github</a>
and <a class="reference external" href="http://mrzhang.me/blog/blog-equals-github-plus-octopress.html">Blog = Github + Octopress</a> (In Chinese).</p>
<!-- more -->
<div class="section" id="ruby-setup">
<h2>Ruby setup</h2>
<p>Since I am new to ruby, I just follow others&#8217; instructions to install ruby by rvm.
My first attempt was:</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="console"><span class="line"><span class="gp">$</span> sudo apt-get install ruby-rvm
</span></code></pre></td></tr></table></div></figure><p>This turned out to cause some troubles in the following steps to install ruby 1.9.2.
I don&#8217;t know the exact reason because I am not familiar with ruby. This <a class="reference external" href="http://octopress.org/docs/setup/rvm/">link</a>
contains detailed information to install rvm. Once it&#8217;s installed, installing octopress
following <a class="reference external" href="http://octopress.org/docs/setup/">the offical guide</a> should be straightforward.</p>
</div>
<div class="section" id="host-on-github">
<h2>Host on Github</h2>
<p>This is very simple in Octopress.
I mainly followed <a class="reference external" href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">this</a>, one
thing worth mentioning here is during the step to enter the url of your repository after typing</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="console"><span class="line"><span class="gp">$</span> rake setup_github_pages
</span></code></pre></td></tr></table></div></figure><p>Here, the repo must use the username/username.github.com naming scheme,
see <a class="reference external" href="https://help.github.com/articles/user-organization-and-project-pages">here</a></p>
</div>
<div class="section" id="writing-posts-with-restructuredtext">
<h2>Writing posts with reStructuredText</h2>
<p>As you may already know, I am a python fan. So I prefer rst to markdown.
<a class="reference external" href="https://github.com/xdissent/jekyll-rst">jekyll-rst</a>
is the plugin to add rst support to Octopress. After enabling the plugin, I changed
default post ext in _confg.yml to rst. Code block in rst is quite handy to type.</p>
<figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
</span><span class="line">    <span class="sd">&quot;&quot;&quot;Testing octopress&quot;&quot;&quot;</span>
</span><span class="line">
</span><span class="line">    <span class="k">print</span> <span class="s">&quot;this is so cool&quot;</span>
</span></code></pre></td></tr></table></div></figure></div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://chuchao333.github.com/blog/2012/07/25/hello-octopress/"/>
    <updated>2012-07-25T02:31:00+08:00</updated>
    <id>http://chuchao333.github.com/blog/2012/07/25/hello-octopress</id>
    <content type="html"><![CDATA[<p>This is the first post, using Octopress to set up a tech blog on github is
so cool!</p>

<h2 id="to-do">TO DO:</h2>
<hr />

<ul>
  <li>Add a ‘about’ page serving as the self introduction</li>
  <li>Enable visitors to post comments</li>
  <li>Add useful plugins</li>
  <li>Prepare the post to summarise the process of setting all this things up</li>
</ul>

<h2 id="update-on-2012-07-27">Update on 2012-07-27:</h2>
<hr />

<p>So far, I have finished the basic settings of this blog. The changes include:</p>

<ul>
  <li>Change the default layout and fonts to my preference</li>
  <li>Add jekyll-rst plugin, to use rst rather then markdown by default</li>
  <li>Enable comment</li>
  <li>Add custom asides: category_list, recent_comment, douban and tag cloud</li>
</ul>

]]></content>
  </entry>
  
</feed>
